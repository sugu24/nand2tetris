// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        let twoToThe = Array.new(16);
        let i = 0;
        let twoToThe[0] = 1;
        while (i < 15){
            let twoToThe[i+1] = twoToThe[i] + twoToThe[i];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x > 0){
            return x;
        }
        else{
            return -x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    
    function boolean bit(int x,int j){
        if (x & twoToThe[j] = 0){
            return false;
        }
        else{
            return true;
        }
    }
    
    function int multiply(int x, int y) {
        var int result, i, absx, absy;
        var boolean is_bit;
        let result = 0;
        let i = 0;
        let absx = Math.abs(x);
        let absy = Math.abs(y);
        while (i < 16){
            let is_bit = Math.bit(absy,i);
            if (is_bit){
                let result = result + absx;
            }
            let absx = absx + absx;
            let i = i + 1;
        }
        if (Math.abs(x) = x){
            let result = -result;
        }
        if (Math.abs(y) = y){
            let result = -result;
        }
        return result;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int p, absx, absy;
        let absx = Math.abs(x);
        let absy = Math.abs(y);

        if (absx < absy){
            return 0;
        }
        let p = Math.divide(absx, absy+absy);
        if (absx - Math.multiply(p+p, y) < absy){
            let p = p + p;
        }
        else{
            let p = p + p + 1;
        }
        if (Math.abs(x) = x){
            let p = -p;
        }
        if (Math.abs(y) = y){
            let p = -p;
        }
        return p;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int result;
        var int i;
        var int temp, temptemp;
        
        let result = 0;
        let i = 7;
        while(~(i < 0)) {
            let temp = result + twoToThe[i];
            let temptemp = Math.multiply(temp, temp);
            if(~(temptemp > x) & (temptemp > 0) ) {
                let result = temp;
            }
            let i = i - 1;
        }
        return result;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b){
            return a;
        }
        else{
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b){
            return b;
        }
        else{
            return a;
        }
    }
}
