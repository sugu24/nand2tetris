// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buff;
    field int buff_length;
    field int string_length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0){
            let maxLength = 1;
        }
        let buff = Array.new(maxLength);
        let buff_length = maxLength;
        let string_length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(buff);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return string_length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return buff[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let buff[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
         if (string_length < buff_length){
             let buff[string_length] = c;
             let string_length = string_length + 1;
         }
         return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (string_length > 0){
            let string_length = string_length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i;
        var int result;
        var boolean neg;
	
        let result = 0;

        if ((string_length > 0) & (buff[0] = 45)){
            let neg = true;
            let i = 1;
        }
        else{
            let neg = false;
            let i = 0;
        }

        while (i < string_length){
            if ((buff[i] > 47) & (buff[i] < 58)){
                let result = (result * 10) + (buff[i] - 48);
            }
            let i = i + 1;
        }
        
        if (neg){
            let result = -result;
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let string_length = 0;
        
        if (val < 0){
            do appendChar(45);
            let val = -val;
        }
        do setint(val);
        return;
    }

    method void setint(int val){
        var int mod;

        if (val > 9){
            let mod = val - ((val/10)*10);
            let val = val / 10;
            do setint(val);
            do appendChar(mod+48);
        }
        else{
            do appendChar(val+48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
